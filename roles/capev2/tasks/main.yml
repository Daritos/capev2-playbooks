- name: Install general dependencies
  apt:
    pkg:
    - git
    - make
    - build-essential
    - python3
    - python3-dev
    state: latest

- name: Get pip
  get_url:
    url: https://bootstrap.pypa.io/get-pip.py
    dest: /tmp/get-pip.py

- name: Install pip3
  shell: python3 /tmp/get-pip.py

- name: Make sure python package passlib is present
  pip:
    name: passlib
    state: present
    executable: pip3

- name: Set timezone to UTC
  timezone:
    name: UTC

- name: Ensure en_US.UTF-8 exists
  locale_gen:
    name: en_US.UTF-8
    state: present

- name: Set en_US.UTF-8 as default locale
  command: localectl set-locale LANGUAGE=en_US.UTF-8 LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8

- name: Install Cape dependencies
  apt:
    pkg:
    - psmisc
    - jq
    - sqlite3
    - tmux
    - net-tools
    - checkinstall
    - graphviz
    - python3-pydot
    - numactl
    - libjpeg-dev
    - zlib1g-dev
    - upx-ucl
    - libssl-dev
    - wget
    - zip
    - unzip
    - p7zip-full
    - rar
    - unrar
    - unace-nonfree
    - cabextract
    - geoip-database
    - libgeoip-dev
    - mono-utils
    - ssdeep
    - libfuzzy-dev
    - exiftool
    - uthash-dev
    - libconfig-dev
    - libarchive-dev
    - libtool
    - autoconf
    - automake
    - privoxy
    - software-properties-common
    - wkhtmltopdf
    - xvfb
    - xfonts-100dpi
    - tcpdump
    - libcap2-bin
    - python3-pil
    - subversion
    - uwsgi
    - uwsgi-plugin-python3
    - python3-pyelftools
    - curl
    - openvpn
    - wireguard
    - libre2-dev
    - openjdk-11-jdk-headless
    - openjdk-8-jdk-headless
    state: latest

- name: Install python3 dependencies
  pip:
    name:
    - Pebble
    - bson
    - pymisp
    - cryptography
    - requests[security]
    - pyOpenSSL
    - pefile
    - tldextract
    - imagehash
    - oletools
    - olefile
    - "networkx>=2.1"
    - mixbox
    - capstone
    - PyCrypto
    - voluptuous
    - xmltodict
    - future
    - python-dateutil
    - requests_file
    - "gevent==20.4.0"
    - simplejson
    - pyvmomi
    - pyinstaller
    - maec
    - regex
    - xmltodict
    - git+https://github.com/doomedraven/sflock.git
    - git+https://github.com/doomedraven/socks5man.git
    - "pyattck>=2.0.2"
    - distorm3
    - openpyxl
    - git+https://github.com/volatilityfoundation/volatility3
    - git+https://github.com/DissectMalware/XLMMacroDeobfuscator
    - passlib
    - pyzipper
    - git+https://github.com/Defense-Cyber-Crime-Center/DC3-MWCP.git
    - git+https://github.com/kevthehermit/RATDecoders.git
    - "greenlet==0.4.16"
    - cython
    - git+https://github.com/andreasvc/pyre2.git
    - git+https://github.com/jbremer/peepdf.git
    - "matplotlib>=2.2.2"
    - "numpy>=1.15.0"
    - "six>=1.12.0"
    - "statistics>=1.0.3.5"
    - "django>3"
    - git+https://github.com/jsocol/django-ratelimit.git
    - sqlalchemy
    - sqlalchemy-utils
    - jinja2
    - markupsafe
    - bottle
    - chardet
    - pygal
    - rarfile
    - jsbeautifier
    - dpkt
    - nose
    - dnspython
    - pytz
    - requests[socks]
    - python-magic
    - geoip
    - pillow
    - java-random
    - python-whois
    - bs4
    - pype32-py3
    - git+https://github.com/kbandla/pydeep.git
    - flask
    - flask-restful
    - flask-sqlalchemy
    - pyvmomi
    executable: pip3

- name: Add Postgresql GPG Key
  apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present

- name: Add PostgreSQL repo
  apt_repository:
    repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
    state: present

- name: Install postgresql
  apt:
    pkg:
    - postgresql
    - postgresql-client
    - postgresql-contrib
    - libpq-dev
    state: latest
    update_cache: true

- name: Make sure postgresql is started and enabled on boot
  systemd:
    name: postgresql
    state: started
    enabled: true

- name: Make sure python package psycopg2 is present
  pip:
    name: psycopg2
    state: present
    executable: pip3

- name: "Setup a database with name {{ cape_db_user }}"
  postgresql_db:
    name: "{{ cape_db_user }}"
    state: present
  become: true
  become_user: postgres

- name: "Create database user {{ cape_db_user }}, and grant access to cuckoo database"
  postgresql_user:
    db: cape
    name: "{{ cape_db_user }}"
    password: "{{ cape_db_password }}"
    priv: "ALL"
    state: present
  become: true
  become_user: postgres

- name: Install apparmor-utils
  apt:
    pkg:
    - apparmor-utils
    state: latest

- name: Disable apparmor for /usr/sbin/tcpdump
  shell:
    cmd: "aa-disable /usr/sbin/tcpdump"
  ignore_errors: true

- name: "Create group {{ cape_user }}"
  group:
    name: "{{ cape_user }}"
    state: present

- name: "Create group pcap"
  group:
    name: "pcap"
    state: present

- name: "Create group suricata"
  group:
    name: "suricata"
    state: present

- name: "Add user {{ cape_user }}"
  user:
    name: "{{ cape_user }}"
    groups: "{{ cape_user }},pcap,suricata"
    append: yes
    comment: "{{ cape_user }} nologin User"
    state: present

- name: Ensure /usr/sbin/tcpdump is owned by pcap group
  file:
    path: /usr/sbin/tcpdump
    group: pcap

- name: Set capabilities for /usr/sbin/tcpdump
  capabilities:
    path: /usr/sbin/tcpdump
    capability: "{{ item.value }}"
    state: present
  with_items:
    - value: "cap_net_raw=eip"
    - value: "cap_net_admin=eip"

######
# TOR
######

- name: Add Tor repo GPG Key
  apt_key:
    url: https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc
    state: present

- name: Add Tor repo (deb)
  apt_repository:
    repo: "deb http://deb.torproject.org/torproject.org {{ ansible_distribution_release }} main"
    state: present

- name: Add Tor repo (deb-src)
  apt_repository:
    repo: "deb-src http://deb.torproject.org/torproject.org {{ ansible_distribution_release }} main"
    state: present

- name: Install Tor
  apt:
    pkg:
    - tor
    - deb.torproject.org-keyring
    - libzstd1
    update_cache: true

- name: Configure Tor to run as daemon
  lineinfile:
    dest: /etc/tor/torrc
    line: "RunAsDaemon 1"
    regexp: "^#RunAsDaemon 1"

- name: Configure Tor ports
  lineinfile:
    dest: /etc/tor/torrc
    line: "{{ item.name }} {{ item.value }}"
    regexp: "^{{ item.name }}"
  with_items:
    - name: "TransPort "
      value: "{{ tor_listening_ip }}:9040"
    - name: "DNSPort "
      value: "{{ tor_listening_ip }}:5353"
    - name: "NumCPUs "
      value: "{{ ansible_processor_vcpus }}"

- name: Make sure tor is started and enabled on boot
  systemd:
    name: tor
    state: restarted
    enabled: true

- name: Configure /etc/security/limits.conf
  pam_limits:
    domain: "{{ item.domain }}"
    limit_type: "{{ item.type }}"
    limit_item: "{{ item.item }}"
    value: "{{ item.value }}"
  with_items:
    - domain: "*"
      type: "soft"
      item: "nofile"
      value: "1048576"
    - domain: "*"
      type: "hard"
      item: "nofile"
      value: "1048576"
    - domain: "root"
      type: "soft"
      item: "nofile"
      value: "1048576"
    - domain: "root"
      type: "hard"
      item: "nofile"
      value: "1048576"

- name: Configure /etc/sysctl.conf
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - name: "fs.file-max"
      value: "100000"
    - name: "net.ipv6.conf.all.disable_ipv6"
      value: "1"
    - name: "net.ipv6.conf.default.disable_ipv6"
      value: "1"
    - name: "net.ipv6.conf.lo.disable_ipv6"
      value: "1"
#    - name: "net.bridge.bridge-nf-call-ip6tables"
#      value: "0"
#    - name: "net.bridge.bridge-nf-call-iptables"
#      value: "0"
#    - name: "net.bridge.bridge-nf-call-arptables"
#      value: "0"

############
# PassiveDNS
############

- name: Install dependencies for passivedns
  apt:
    pkg:
    - binutils-dev
    - libldns-dev
    - libpcap-dev
    - libdate-simple-perl
    - libdatetime-perl
    - libdbd-mysql-perl
    state: latest

- name: Download the latest passivedns source from git
  git:
    repo: git://github.com/gamelinux/passivedns.git
    dest: /opt/passivedns
    force: true

- name: Run autoreconf for the passivedns source
  shell:
    cmd: autoreconf --install
    chdir: /opt/passivedns

- name: Configure build for the passivedns source
  shell:
    cmd: ./configure
    chdir: /opt/passivedns

- name: Build the passivedns target
  make:
    chdir: /opt/passivedns

- name: Deploy the passivedns build using check install
  shell:
    cmd: checkinstall -D --pkgname=passivedns --default
    chdir: /opt/passivedns

# TODO: Compile/verify? lzmat

- name: Setup resources folder for hosting volatility resources
  file:
    path: /usr/local/lib/python3/dist-packages/volatility/resources
    state: directory

- name: Create python __init__ file
  file:
    path: /usr/local/lib/python3/dist-packages/volatility/resources/__init__.py
    state: touch

- name: Download the lzmat source from git
  git:
    repo: https://github.com/nemequ/lzmat
    dest: /usr/local/lib/python3/dist-packages/volatility/resources/lzmat
    force: true

- name: Build lzmat from source
  shell:
    cmd: gcc -Wall -fPIC -c lzmat_dec.c
    chdir: /usr/local/lib/python3/dist-packages/volatility/resources/lzmat

- name: Link and compile lzmat build
  shell:
    cmd: gcc -shared -Wl,-soname,lzmat_dec.so.1 -o lzmat_dec.so.1.0 lzmat_dec.o
    chdir: /usr/local/lib/python3/dist-packages/volatility/resources/lzmat

- name: Move the lzmat files to resource folder
  shell:
    cmd: mv /usr/local/lib/python3/dist-packages/volatility/resources/lzmat/* /usr/local/lib/python3/dist-packages/volatility/resources/

- name: Remove lzmat build directory
  file:
    path: /usr/local/lib/python3/dist-packages/volatility/resources/lzmat
    state: absent

################
# Unicorn-engine
################

- name: Install unicorn-engine dependencies
  apt:
    pkg:
    - libglib2.0-dev
    state: latest

- name: Download the latest unicorn-engine source from git
  git:
    repo: https://github.com/unicorn-engine/unicorn.git
    dest: /opt/unicorn
    force: true

- name: Build the unicorn-engine target
  shell:
    cmd: ./make.sh
    chdir: /opt/unicorn

- name: Install the unicorn-engine target
  shell:
    cmd: ./make.sh install
    chdir: /opt/unicorn

- name: Install unicorn python dependencies
  pip:
    name:
    - unicorn
    - Capstone
    executable: pip3

######
# NTP
######

- name: Install ntp daemon
  apt:
    pkg:
    - ntp
    state: latest

- name: Ensure ntp is started and enable the service to run on boot
  systemd:
    name: ntp
    state: started
    enabled: true


#######
# Mongo
#######

- name: Install MongoDB dependencies
  apt:
    pkg:
    - libpcre3-dev
    state: latest

- name: Install MongoDB 4.2 GPG-KEY
  apt_key:
    url:  https://www.mongodb.org/static/pgp/server-4.2.asc
    state: present

- name: Add MongoDB 4.2 repo
  apt_repository:
    repo: "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu {{ ansible_distribution_release }}/mongodb-org/4.2 multiverse"

- name: Install MongoDB
  apt:
    pkg:
    - mongodb-org
    - mongodb-org-mongos
    - mongodb-org-server
    - mongodb-org-shell
    - mongodb-org-tools
    state: latest
    update_cache: true

- name: Globaly install pymongo
  pip:
    name: pymongo
    executable: pip3

- name: (Tuning OS for MongoDB) Install sysfsutils
  apt:
    pkg:
    - sysfsutils
    state: latest

- name: (Tuning OS for MongoDB) Configure transparent_hugepages in /etc/sysfs.conf
  lineinfile:
    dest: /etc/sysfs.conf
    line: "{{ item.name }} = {{ item.value }}"
    regexp: "^{{ item.name }}"
    state: present
  with_items:
    - name: "kernel/mm/transparent_hugepage/enabled"
      value: "never"
    - name: "kernel/mm/transparent_hugepage/defrag"
      value: "never"

- name: (Tuning OS for MongoDB) Rewrite default mongodb service configuration
  template:
    src: mongod.service.j2
    dest: /etc/systemd/system/mongod.service

- name: Ensure MongoDB is started and enable the service to run on boot
  systemd:
    name: mongod
    state: restarted
    enabled: true
    daemon_reload: true

#################
# Setup suricata
#################

- name: Add suricata deb repo
  apt_repository:
    repo: "ppa:oisf/suricata-stable"
    filename: suricata_stable
    state: present

- name: Install suricata
  apt:
    pkg:
    - suricata
    state: latest

- name: Create /etc/suricata/threshold.config
  file:
    path: /etc/suricata/threshold.config
    state: touch

- name: Install python package for updating suricata rules
  pip:
    name:
    - suricata-update
    executable: pip3

- name: Setup directory for hosting rules
  file:
    path: /etc/suricata/rules
    state: directory
    recurse: true

- name: Create cronjob for updating rules
  cron:
    name: update suricata rules
    minute: "15"
    hour: "*"
    day: "*"
    month: "*"
    weekday: "*"
    user: root
    job: "/usr/bin/suricata-update --suricata /usr/bin/suricata --suricata-conf /etc/suricata/suricata.yaml -o /etc/suricata/rules/"
    cron_file: ansible_suricata_rules_autoupdate

- name: Adjust suricata configuration /etc/default/suricata
  lineinfile:
    dest: /etc/default/suricata
    line: "{{ item.value }}"
    regexp: "^{{ item.name }}"
  with_items:
    - name: "RUN="
      value: "RUN=no"
    - name: "#default-rule-path: /etc/suricata/rules"
      value: "default-rule-path: /etc/suricata/rules"

- name: Adjust suricata configuration /etc/suricata/suricata.yaml
  lineinfile:
    dest: /etc/suricata/suricata.yaml
    line: "{{ item.value }}"
    regexp: "^{{ item.name }}"
  with_items:
    - name: "#?rule-files:"
      value: "rule-files:"
    - name: "#?  - suricata.rules"
      value: "  - suricata.rules"
    - name: "mpm-algo:"
      value: "mpm-algo: auto"
    - name: "#?run-as:"
      value: "run-as:"
    - name: "#?  user:"
      value: "  user: {{ cape_user }}"
    - name: "#?  group:"
      value: "  group: {{ cape_user }}"
    - name: "    depth:"
      value: "    depth: 0"
    - name: "           request-body-limit:"
      value: "           request-body-limit: 0"
    - name: "           response-body-limit:"
      value: "           response-body-limit: 0"
    - name: "    EXTERNAL_NET: "
      value: "    EXTERNAL_NET: \"ANY\""
    - name: "#checksum-validation: "
      value: "checksum-validation: nones"

- name: Set permissions for /var/run/suricata
  file:
    path: /var/run/suricata
    state: directory
    mode: 0775
    group: suricata

- name: Enable eve-log in suricata configuration /etc/suricata/suricata.yaml
  lineinfile:
    dest: /etc/suricata/suricata.yaml
    line: "\\1 yes"
    regexp: "^(.*eve-log:\\n.*enabled:).*$"
    backrefs: true

# Skipped changing custom socket path

- name: Set ownership of /etc/suricata
  file:
    path: /etc/suricata
    state: directory
    group: "suricata"
    owner: "{{ cape_user }}"

- name: Set permissions for /var/lib/suricata/rules
  file:
    path: /var/lib/suricata/rules
    state: directory
    mode: 0655
    group: suricata
    recurse: true

- name: Set permissions for /var/lib/suricata/update
  file:
    path: /var/lib/suricata/update
    state: directory
    mode: 0655
    group: suricata
    recurse: true

- name: Run suricata rule update manually once
  shell:
    cmd: "/usr/bin/suricata-update --suricata /usr/bin/suricata --suricata-conf /etc/suricata/suricata.yaml -o /etc/suricata/rules/"
    creates: /var/lib/suricata/rules/suricata.rules

- name: Create cronjob for reloading rules
  cron:
    name: reload suricata rules
    minute: "16"
    hour: "*"
    day: "*"
    month: "*"
    weekday: "*"
    user: root
    job: "/usr/bin/suricatasc -c reload-rules"
    cron_file: ansible_suricata_rules_reload

#######
# YARA
#######

# Skipped old version purge

- name: Install Yara dependencies
  apt:
    pkg:
    - libtool
    - libjansson-dev
    - libmagic1
    - libmagic-dev
    - jq
    - autoconf
    - checkinstall

- name: Get latest release tag from Yara repo
  uri:
    url: "https://api.github.com/repos/VirusTotal/yara/releases/latest"
    return_content: true
  register: yara_latest

- name: Download the Yara from git
  git:
    repo: https://github.com/VirusTotal/yara.git
    dest: /opt/yara
    force: true
    version: "{{ yara_latest.json.tag_name }}"

- name: Run Yara bootstrap
  shell:
    cmd: "./bootstrap.sh"
    chdir: /opt/yara

- name: Run Yara configure
  shell:
    cmd: "./configure --enable-cuckoo --enable-magic --enable-dotnet --enable-profiling"
    chdir: /opt/yara

- name: Build the Yara target
  make:
    chdir: /opt/yara

- name: Utilize checkinstall to deploy yara as a package
  shell:
    cmd: "checkinstall -D --pkgname=\"yara-{{ yara_version }}\" --pkgversion=\"{{ yara_version }}|cut -c 2-\" --default"
    chdir: /opt/yara

- name: Run ldconfig
  shell:
    cmd: ldconfig

- name: Globaly install yara-python from git
  pip:
    name: git+https://github.com/VirusTotal/yara-python
    executable: pip3

